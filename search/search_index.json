{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Daybook This is a compilation of ideas, lessons learned and areas in which I want to improve. Te idea behind this website is to have a record of all the knowledge I gather as a developer. Ideally, I'll add content on a daily basis. This site is inspired by Engineering Daybooks - The Pragmatic Programmer What am I going to talk about? English Algorithms and Interview Prep Python and Software Dev","title":"Daybook"},{"location":"#daybook","text":"This is a compilation of ideas, lessons learned and areas in which I want to improve. Te idea behind this website is to have a record of all the knowledge I gather as a developer. Ideally, I'll add content on a daily basis. This site is inspired by Engineering Daybooks - The Pragmatic Programmer","title":"Daybook"},{"location":"#what-am-i-going-to-talk-about","text":"English Algorithms and Interview Prep Python and Software Dev","title":"What am I going to talk about?"},{"location":"algorithms/grokking-algorithms/","text":"Grokking Algorithms Chapter 1 - Introduction to Algorithms Talks about what is an algorithm (a serie of steps to solve a problem) How to messure an algorithm (Big O notation) How to implement binary search, and demostrate taht is faster than a simple search. There are some problems that doesn't have solution and need an aproximation. def binary_search ( list_ : typing . List [], item : int ): low = 0 high = len ( list ) - 1 while low <= high : mid = ( low + high ) guess = list_ [ mid ] if guess == item : return mid if guess > item : high = mid - 1 else : low = mid + 1 return None Chapter 2 - Selection Sort A computer memory is like an Excel sheet and each cell has his address. A list uses continuous memory and save items continuously, while a linked list, save items in different address and link them. Arrays allow fast reads. Linked lists allow fast inserts and deletes. A explanation of selection sort def find_smallet ( arr : typing . List []): smallest = arr [ 0 ] smallest_index = 0 for i in range ( 1 , len ( arr )): if arr [ i ] < smallest : smallest_index = i return smallest_index def selection_sort ( arr : typing . List []): new_arr = [] for i in range ( len ( arr )): smallest = find_smallest ( arr ) new_arr . append ( arr . pop ( smallest )) return new_arr Chapter 3 - Recursion Recursion is when a function calls itself. Every recursive function has two cases: the base case and the recursive case. A stack has two operations: push and pop. All function calls go onto the call stack. The call stack can get very large, which takes up a lot of memory.","title":"Grokking Algorithms"},{"location":"algorithms/grokking-algorithms/#grokking-algorithms","text":"","title":"Grokking Algorithms"},{"location":"algorithms/grokking-algorithms/#chapter-1-introduction-to-algorithms","text":"Talks about what is an algorithm (a serie of steps to solve a problem) How to messure an algorithm (Big O notation) How to implement binary search, and demostrate taht is faster than a simple search. There are some problems that doesn't have solution and need an aproximation. def binary_search ( list_ : typing . List [], item : int ): low = 0 high = len ( list ) - 1 while low <= high : mid = ( low + high ) guess = list_ [ mid ] if guess == item : return mid if guess > item : high = mid - 1 else : low = mid + 1 return None","title":"Chapter 1 - Introduction to Algorithms"},{"location":"algorithms/grokking-algorithms/#chapter-2-selection-sort","text":"A computer memory is like an Excel sheet and each cell has his address. A list uses continuous memory and save items continuously, while a linked list, save items in different address and link them. Arrays allow fast reads. Linked lists allow fast inserts and deletes. A explanation of selection sort def find_smallet ( arr : typing . List []): smallest = arr [ 0 ] smallest_index = 0 for i in range ( 1 , len ( arr )): if arr [ i ] < smallest : smallest_index = i return smallest_index def selection_sort ( arr : typing . List []): new_arr = [] for i in range ( len ( arr )): smallest = find_smallest ( arr ) new_arr . append ( arr . pop ( smallest )) return new_arr","title":"Chapter 2 - Selection Sort"},{"location":"algorithms/grokking-algorithms/#chapter-3-recursion","text":"Recursion is when a function calls itself. Every recursive function has two cases: the base case and the recursive case. A stack has two operations: push and pop. All function calls go onto the call stack. The call stack can get very large, which takes up a lot of memory.","title":"Chapter 3 - Recursion"},{"location":"algorithms/introduction/","text":"I'm going to start reading Grooking Algorithms Two other books I'd like to read: - Elements of Programming Interviews in Python - Cracking the Coding Interview I'll start solving problems in leetcode.com and updating this repo with the solutions. Recommended exercises to solve grind75 and neetcode An interesting repo that I'd like to take a look is javascript-algorithms I'll follow algo.monster as guide to improve my algorithms skills. After some time without progess (because I didn't put enough effort). I'll start checking this site: techinterviewhandbook along with Grokking Algorithms book","title":"Introduction"},{"location":"blog/5-books-to-learn-python/","text":"Improve your python skills with these 5 free books 2021-05-11 Check these 5 free books to improve your python skills There are tons of books out there, but today we'll review 5 great books to improve your python skills. Let's start at the beginning, if you don't know anything about python you can choose these two books: Automate the Boring Stuff with Python Beyond the Basic Stuff with Python If you are comfortable with Python and want to advance to the next level, you can learn about testing with this book: Obey the Testing Goat! Finally, if you want to learn more high-level concepts, you can read these two books: Clean Architectures in Python Architecture Patterns with Python","title":"Improve your python skills with these 5 free books"},{"location":"blog/5-books-to-learn-python/#improve-your-python-skills-with-these-5-free-books","text":"2021-05-11 Check these 5 free books to improve your python skills There are tons of books out there, but today we'll review 5 great books to improve your python skills. Let's start at the beginning, if you don't know anything about python you can choose these two books: Automate the Boring Stuff with Python Beyond the Basic Stuff with Python If you are comfortable with Python and want to advance to the next level, you can learn about testing with this book: Obey the Testing Goat! Finally, if you want to learn more high-level concepts, you can read these two books: Clean Architectures in Python Architecture Patterns with Python","title":"Improve your python skills with these 5 free books"},{"location":"blog/9-useful-git-commands/","text":"9 useful Git commands 2021-09-25 Check these 9 useful Git commands for your day to day work Here we're going to explore some common Git commands, which help you work more fluid with Git, you can revisit this page when whenever you need these commands. Basic Commands First we'll begin with some basic commands, these will help you to set up your enviroment and create a local reposiory: Note : we can have two repositories a local repository (in your computer) and remote repository (generally a repo on GitHub, GitLab, etc) # Config/Update your username/email git config --global user.name \"your_name\" git config --global user.email \"your_name@gmail.com\" # Check your username/email git config --global user.name git config --global user.email # Create your local repository git init # you need to run this command in your project folder # For an existing repository you can clone that repo git clone repo-url Now we are going to check a basic workflow to add changes in your project # When you change a folder/file in your project you can # show your current unstaged changes with this command git status # Add your new changes to staging area # To do this you can use two commands # You can add an especifically directory or file, e.g. git add filename # You can add all the changes git add -A # this command stages all your changes git add . # stages new files and modifications, **without deletions** # Commit (make a record of your changes) # -m flag is used to add an inline commit message, instead of open an editor git commit -m \"Commit message\" # Show commits history git log # Send changes to remote repo git push origin branch-name Once we know the basic git workflow to save/track changes in our projects, it's moment to see more commands and variation of above commands Basic Commands Variations Instead of execute git add and git commit as differents commands we can do it in one command: # -a automatically stage all tracked, modified files before the commit git commit -am \"Commit message\" Show one line commits history git log --pretty = oneline # Show a tree view git log --graph --oneline --all Branch Command to work with branches Creating a new branch # This command only creates the branch but you still are in the current branch git branch new-branch Show all branches # This command only creates the branch but you still are in the current branch git branch Deleting a branch git branch -D new-branch Checkout This command is used to move between branches or as alternative to create a branch, also you can restart your changes with this command. Creating a new branch and moving to the new branch git checkout -b branch-name Moving to an specifict branch git checkout specifict-branch Return to previus branch git checkout - Remove unstaged changes git checkout . Stash This is a useful command, I think is like copy/paste but for your work when yout are working with Git. Usually you can run this command to move your work from a branch to another branch Stashinng changes git stash List stashing changes git stash list Apply last stashed change git stash apply Rebase This is a command to combine your work with others work. It's similar to merge command, but you can do more things, like combine commits or rename them, etc. Rebase your branch from master branch git rebase master Rebase your changes interactively # rebase interactively with master branch git rebase -i master # rebase interactively your last 3 commits git rebase -i HEAD~3 Interactively means that Git opens your default editor to allow you to manage your commits Reset and Revert I usually use this command to reset last change than inentantionally I created. You can use revert when you want to create a explicit commit that show the revert changes, this is specially to send public commits showing the revert changes Reset/Remove last change # Keeps the changes in the staging area git reset --soft HEAD~1 # Remove all modifications in the last change git reset --hard HEAD~1 Revert a commit git revert commit-hash # a8c0c0b8q Fetch and Diff Fetch is useful when you want to update your local branch with a remote one. Diff allows you to compare the changes of your current branch with other branches Fetch changes from a remote branch git fetch origin branch-name Compare your branch with others git diff other-branch Pull & Push This allows you to send/get changes to/from a remote repository Get changes from a remote branch git pull origin branch-name Send changes to a remote branch git push origin branch-name # when you made a rebase, generally you need to force a push # we use --force-with-lease to don't override other's changes git push origin branch-name --force-with-lease","title":"9 useful Git commands"},{"location":"blog/9-useful-git-commands/#9-useful-git-commands","text":"2021-09-25 Check these 9 useful Git commands for your day to day work Here we're going to explore some common Git commands, which help you work more fluid with Git, you can revisit this page when whenever you need these commands.","title":"9 useful Git commands"},{"location":"blog/9-useful-git-commands/#basic-commands","text":"First we'll begin with some basic commands, these will help you to set up your enviroment and create a local reposiory: Note : we can have two repositories a local repository (in your computer) and remote repository (generally a repo on GitHub, GitLab, etc) # Config/Update your username/email git config --global user.name \"your_name\" git config --global user.email \"your_name@gmail.com\" # Check your username/email git config --global user.name git config --global user.email # Create your local repository git init # you need to run this command in your project folder # For an existing repository you can clone that repo git clone repo-url Now we are going to check a basic workflow to add changes in your project # When you change a folder/file in your project you can # show your current unstaged changes with this command git status # Add your new changes to staging area # To do this you can use two commands # You can add an especifically directory or file, e.g. git add filename # You can add all the changes git add -A # this command stages all your changes git add . # stages new files and modifications, **without deletions** # Commit (make a record of your changes) # -m flag is used to add an inline commit message, instead of open an editor git commit -m \"Commit message\" # Show commits history git log # Send changes to remote repo git push origin branch-name Once we know the basic git workflow to save/track changes in our projects, it's moment to see more commands and variation of above commands","title":"Basic Commands"},{"location":"blog/9-useful-git-commands/#basic-commands-variations","text":"Instead of execute git add and git commit as differents commands we can do it in one command: # -a automatically stage all tracked, modified files before the commit git commit -am \"Commit message\" Show one line commits history git log --pretty = oneline # Show a tree view git log --graph --oneline --all","title":"Basic Commands Variations"},{"location":"blog/9-useful-git-commands/#branch","text":"Command to work with branches Creating a new branch # This command only creates the branch but you still are in the current branch git branch new-branch Show all branches # This command only creates the branch but you still are in the current branch git branch Deleting a branch git branch -D new-branch","title":"Branch"},{"location":"blog/9-useful-git-commands/#checkout","text":"This command is used to move between branches or as alternative to create a branch, also you can restart your changes with this command. Creating a new branch and moving to the new branch git checkout -b branch-name Moving to an specifict branch git checkout specifict-branch Return to previus branch git checkout - Remove unstaged changes git checkout .","title":"Checkout"},{"location":"blog/9-useful-git-commands/#stash","text":"This is a useful command, I think is like copy/paste but for your work when yout are working with Git. Usually you can run this command to move your work from a branch to another branch Stashinng changes git stash List stashing changes git stash list Apply last stashed change git stash apply","title":"Stash"},{"location":"blog/9-useful-git-commands/#rebase","text":"This is a command to combine your work with others work. It's similar to merge command, but you can do more things, like combine commits or rename them, etc. Rebase your branch from master branch git rebase master Rebase your changes interactively # rebase interactively with master branch git rebase -i master # rebase interactively your last 3 commits git rebase -i HEAD~3 Interactively means that Git opens your default editor to allow you to manage your commits","title":"Rebase"},{"location":"blog/9-useful-git-commands/#reset-and-revert","text":"I usually use this command to reset last change than inentantionally I created. You can use revert when you want to create a explicit commit that show the revert changes, this is specially to send public commits showing the revert changes Reset/Remove last change # Keeps the changes in the staging area git reset --soft HEAD~1 # Remove all modifications in the last change git reset --hard HEAD~1 Revert a commit git revert commit-hash # a8c0c0b8q","title":"Reset and Revert"},{"location":"blog/9-useful-git-commands/#fetch-and-diff","text":"Fetch is useful when you want to update your local branch with a remote one. Diff allows you to compare the changes of your current branch with other branches Fetch changes from a remote branch git fetch origin branch-name Compare your branch with others git diff other-branch","title":"Fetch and Diff"},{"location":"blog/9-useful-git-commands/#pull-push","text":"This allows you to send/get changes to/from a remote repository Get changes from a remote branch git pull origin branch-name Send changes to a remote branch git push origin branch-name # when you made a rebase, generally you need to force a push # we use --force-with-lease to don't override other's changes git push origin branch-name --force-with-lease","title":"Pull &amp; Push"},{"location":"blog/python-intercfaces/","text":"Python Interfaces 2021-03-16 Since Python uses duck typing , are not necessary. The original attitude, which held sway for many years, is that you don't need them: Python works on the EAFP (easier to ask forgiveness than permission) principle. This works pretty well, but there are definite use cases for interfaces, especially with larger software projects. The final decision in Python was to provide the abc module, which allows you to write abstract base classes Example import abc class NotImplementedError ( Exception ): pass class Piece ( metaclass = abc . ABCMeta ): @abc . abstractmethod def move ( self , ** kargs ): raise NotImplementedError class Queen ( Piece ): def move ( self , square ): # Specific implementation for the Queen's movements pass class King ( Piece ): pass # Allows you to create an instance of the Queen class queen = Queen () # Does not allow you to create an instance of the Queen class, # because the abstract method move() is not implemented. king = King () References Implementing an Interface in Python How do I implement interfaces in python? Java abstract/interface design in Python","title":"Python Interfaces"},{"location":"blog/python-intercfaces/#python-interfaces","text":"2021-03-16 Since Python uses duck typing , are not necessary. The original attitude, which held sway for many years, is that you don't need them: Python works on the EAFP (easier to ask forgiveness than permission) principle. This works pretty well, but there are definite use cases for interfaces, especially with larger software projects. The final decision in Python was to provide the abc module, which allows you to write abstract base classes","title":"Python Interfaces"},{"location":"blog/python-intercfaces/#example","text":"import abc class NotImplementedError ( Exception ): pass class Piece ( metaclass = abc . ABCMeta ): @abc . abstractmethod def move ( self , ** kargs ): raise NotImplementedError class Queen ( Piece ): def move ( self , square ): # Specific implementation for the Queen's movements pass class King ( Piece ): pass # Allows you to create an instance of the Queen class queen = Queen () # Does not allow you to create an instance of the Queen class, # because the abstract method move() is not implemented. king = King ()","title":"Example"},{"location":"blog/python-intercfaces/#references","text":"Implementing an Interface in Python How do I implement interfaces in python? Java abstract/interface design in Python","title":"References"},{"location":"dev/introduction/","text":"In this section. I'll discuss general software development and specific learnings in languages like Python and JavaScript. I'll start taking a look to The Pragmatic Programmer . Intesting Resources: - coding-interview-university","title":"Introduction"},{"location":"dev/javascript/async/","text":"Asyncrhonously JavaScript Callback function: It's a function passed as an argument to another function. This is useful for asynchronous function. So, the callback is called after the asynchronous function finish.","title":"Asyncrhonously JavaScript"},{"location":"dev/javascript/async/#asyncrhonously-javascript","text":"Callback function: It's a function passed as an argument to another function. This is useful for asynchronous function. So, the callback is called after the asynchronous function finish.","title":"Asyncrhonously JavaScript"},{"location":"english/introduction/","text":"I'm using Duoling (Every Day) and Elsa Speak to improve my English. An awesome website that I use time to time (that's great for speaking) is free4talk.com I'll prepare to take IELTS Academic exam, to grow as professional.","title":"Introduction"},{"location":"english/ietls/resources/","text":"Resources In order to improve my English skills and get a high score in the exam. I'll try some websites, the first one will be e2language","title":"Resources"},{"location":"english/ietls/resources/#resources","text":"In order to improve my English skills and get a high score in the exam. I'll try some websites, the first one will be e2language","title":"Resources"}]}